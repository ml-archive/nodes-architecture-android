// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        kotlin_version = '1.3.50'
        dokkaVersion = '0.9.17'
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokkaVersion"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.1"
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.23.1"
    id 'io.codearte.nexus-staging' version '0.21.0'
}


allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    group = GROUP
    version = VERSION_NAME

    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'com.diffplug.gradle.spotless'

    dokka {
        reportUndocumented = false
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }

    spotless {
        kotlin {
            target "**/*.kt"
            ktlint('0.33.0')
        }

        java {
            target "**/*.java"
            targetExclude '**/Translation.java'
            googleJavaFormat('1.1').aosp()
        }

        format 'groovy', {
            target '**/*.groovy'
            indentWithTabs()
            indentWithSpaces(4)
            endWithNewline()
        }

        format 'misc', {
            target '**/*.gradle'
            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.FlowPreview"

            // Set JVM target to 1.8
            jvmTarget = "1.8"
        }
    }
}

static def getRepositoryUsername() {
    return System.getenv('NEXUS_USERNAME')
}

static def getRepositoryPassword() {
    return System.getenv('NEXUS_PASSWORD')
}

nexusStaging {
    packageGroup = "dk.nodes"
    username = getRepositoryUsername()
    password = getRepositoryPassword()
    delayBetweenRetriesInMillis = 30000
}
